<templateSet group="PHPUnit">
  <template name="it" value="/**&#10; * $TEST$&#10; */&#10;public function test_$TEST_NAME$( $VARS$ ):void {&#10;    $END$&#10;}" description="PHPUnit test function" toReformat="true" toShortenFQNames="true">
    <variable name="TEST" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TEST_NAME" expression="snakeCase(TEST)" defaultValue="" alwaysStopAt="false" />
    <variable name="VARS" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="@data" value="@dataProvider $PROVIDER$" description="dataProvider doc" toReformat="false" toShortenFQNames="true">
    <variable name="PROVIDER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Comment" value="true" />
    </context>
  </template>
  <template name="shouldRecieve" value="$$$mock$-&gt;shouldReceive( '$METHOD$' )&#10;  -&gt;$times$()&#10;  $with$&#10;  -&gt;andReturn( $return$ );" description="shouldReceive" toReformat="true" toShortenFQNames="true">
    <variable name="mock" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="METHOD" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="times" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="with" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="return" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
      <option name="PHP Class Member" value="false" />
      <option name="PHP Comment" value="false" />
      <option name="PHP Statement" value="false" />
      <option name="PHP String Literal" value="false" />
    </context>
  </template>
  <template name="setUpThis" value="/** @var $testClass$ */&#10;public $$$testClassLowerCase$;&#10;&#10;public function setUp(){&#10;  $this-&gt;$testClassLowerCase$ = new $testClass$();&#10;}" description="setUp with this" toReformat="false" toShortenFQNames="true">
    <variable name="testClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="testClassLowerCase" expression="camelCase(testClass)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="mock" value="/** @var $mocking$|m\MockInterface $$$mocked$ */&#10;$$$mocked$ = m::mock( $mocking$::class );" description="Mock Class" toReformat="false" toShortenFQNames="true">
    <variable name="mocking" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="mocked" expression="camelCase(mocking)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Expression" value="true" />
    </context>
  </template>
  <template name="testPrivate" value="$$this-&gt;getMethod( $$this-&gt;$testClass$, '$testmethod$')-&gt;invoke( $$this-&gt;$testClass$$END$ );" description="Get Private method to test" toReformat="false" toShortenFQNames="true">
    <variable name="testClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="testmethod" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Expression" value="true" />
    </context>
  </template>
  <template name="itSetsAndGets" value="/**&#10; * @test&#10; * @covers $COVER_CLASS$::set$FIELD_STUDLEY$();&#10; */&#10;public function sets_$FIELD_UNDERSCORE$_to_itself_and_returns_self() {&#10;  $$value = $VALUE$;&#10;&#10;  $$result = $$this-&gt;$OBJECT$-&gt;set$FIELD_STUDLEY$( $$value );&#10;&#10;  $$this-&gt;assertAttributeEquals( $$value, '$FIELD_CAMEL$', $$this-&gt;$OBJECT$ );&#10;  $$this-&gt;assertSame( $$this-&gt;$OBJECT$, $$result );&#10;&#10;  return [&#10;    'object' =&gt; $$this-&gt;$OBJECT$,&#10;    'value' =&gt; $$value&#10;  ];&#10;}&#10;&#10;/**&#10; * @test&#10; * @covers $COVER_CLASS$::get$FIELD_STUDLEY$()&#10; * @depends sets_$FIELD_UNDERSCORE$_to_itself_and_returns_self&#10; */&#10;public function gets_$FIELD_UNDERSCORE$( array $$setResult ){&#10;  $$result = $$setResult['object']-&gt;get$FIELD_STUDLEY$();&#10;  &#10;  $$this-&gt;assertSame( $$setResult['value'], $$result );&#10;}" description="it sets field to itself" toReformat="true" toShortenFQNames="true">
    <variable name="COVER_CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FIELD_STUDLEY" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OBJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FIELD_UNDERSCORE" expression="snakeCase(FIELD_STUDLEY)" defaultValue="" alwaysStopAt="false" />
    <variable name="FIELD_CAMEL" expression="camelCase(FIELD_STUDLEY)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Class Member" value="true" />
    </context>
  </template>
  <template name="@coversDefault" value="@coversDefaultClass $namespace$" description="coversDefaultClass" toReformat="false" toShortenFQNames="true">
    <variable name="namespace" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Comment" value="true" />
    </context>
  </template>
  <template name="fac" value="/** @var $mocking$ $$$mocked$ */ &#10;$$$mocked$ = factory( $mocking$::class );" description="Factory" toReformat="false" toShortenFQNames="true">
    <variable name="mocking" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="mocked" expression="camelCase(mocking)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="PHP Expression" value="true" />
    </context>
  </template>
  <template name="makeFactory" value="/** @var $modelClass$ $$$modelCamel$ */&#10;$$$modelCamel$ = factory($modelClass$::class)-&gt;make($data$);" description="FactoryMaking" toReformat="true" toShortenFQNames="true">
    <variable name="modelClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="modelCamel" expression="camelCase(modelClass)" defaultValue="" alwaysStopAt="false" />
    <variable name="data" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Expression" value="true" />
      <option name="PHP Statement" value="true" />
    </context>
  </template>
  <template name="createFactory" value="/** @var $modelClass$ $$$modelCamel$ */&#10;$$$modelCamel$ = factory($modelClass$::class)-&gt;create($data$);" description="Factory Create Model" toReformat="true" toShortenFQNames="true">
    <variable name="modelClass" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="modelCamel" expression="camelCase(modelClass)" defaultValue="" alwaysStopAt="false" />
    <variable name="data" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP Expression" value="true" />
      <option name="PHP Statement" value="true" />
    </context>
  </template>
</templateSet>